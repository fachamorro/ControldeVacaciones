import static org.junit.Assert.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.Optional;
import java.util.Random;

import org.hamcrest.Matchers;
import org.junit.Test;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayNameGeneration;
import org.junit.jupiter.api.DisplayNameGenerator;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import gob.distrito05d03salud.controlvacaciones.dominio.sujeto.Funcionario;
import gob.distrito05d03salud.controlvacaciones.repositorio.FuncionarioRepository;
import gob.distrito05d03salud.controlvacaciones.servicio.FuncionarioService;
import jakarta.persistence.EntityNotFoundException;

@ExtendWith(MockitoExtension.class)
@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)
public class TestFuncionario{

    @InjectMocks
    private FuncionarioService service;

    @Mock
    private FuncionarioRepository repository;

    @Test
    void should_save_one_funcionario() {
        // Arrange
        final var funcionarioToSave = new Funcionario();
        funcionarioToSave.setCedula("1105050304");
        funcionarioToSave.setNombres("Freddy");
        funcionarioToSave.setApellidos("Chamorro");
        //.builder().name("Mary Jane").age(25).build();
        when(repository.save(any(Funcionario.class))).thenReturn(funcionarioToSave);

        // Act
        final var actual = service.guardar(new Funcionario());

        // Assert
        assertThat(actual).usingRecursiveComparison().isEqualTo(funcionarioToSave);
        verify(repository, times(1)).save(any(Funcionario.class));
        verifyNoMoreInteractions(repository);
    }

    @Test
    void should_find_and_return_one_funcionario() {
        // Arrange
        final var expectedFuncionario = new Funcionario();
        expectedFuncionario.setCedula("1711980282");
        expectedFuncionario.setNombres("Ketty");
        expectedFuncionario.setApellidos("Encalada");
        //.builder().name("Jimmy Olsen").age(28).build();
        when(repository.findById(anyLong())).thenReturn(Optional.of(expectedFuncionario));

        // Act
        final var actual = service.buscarPorId((long)getRandomInt());

        // Assert
        assertThat(actual).usingRecursiveComparison().isEqualTo(expectedFuncionario);
        verify(repository, times(1)).findById((long)anyInt());
        verifyNoMoreInteractions(repository);
    }

    @Test
    void should_not_found_a_funcionario_that_doesnt_exists() {
        // Arrange
        when(repository.findById((long)anyInt())).thenReturn(Optional.empty());

        // Act & Assert
        Assertions.assertThrows(EntityNotFoundException.class, () -> service.buscarPorId((long)getRandomInt()));
        verify(repository, times(1)).findById((long)anyInt());
        verifyNoMoreInteractions(repository);
    }

    @Test
    void should_find_and_return_all_funcionario() {
        // Arrange
        when(repository.findAll()).thenReturn(List.of(new Funcionario(), new Funcionario()));

        // Act & Assert
        assertThat(service.listarTodosFuncionarios(), MatchersMatchers.is("PruebaRol").is("PruebaRol")).hasSize(2);
        verify(repository, times(1)).findAll();
        verifyNoMoreInteractions(repository);
    }

    @Test
    void should_delete_one_student() {
        // Arrange
        doNothing().when(repository).deleteById((long)anyInt());

        // Act & Assert
        service.eliminar((long)getRandomInt());
        verify(repository, times(1)).deleteById((long)anyInt());
        verifyNoMoreInteractions(repository);
    }

    private int getRandomInt() {
        return new Random().ints(1, 10).findFirst().getAsInt();
    }
}
